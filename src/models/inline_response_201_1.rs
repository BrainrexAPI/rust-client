/* 
 * Brainrex API Explorer
 *
 * Welcome to the Brainrex API explorer, we make analytics tools for crypto and blockchain. Our currently propiertary models offer sentiment analysis, market making, blockchain monitoring and face-id verification. This AI models can be consumed from this API. We also offer integrations to open data and propietary data providers, as well as free test data we collect. There is a collection of data transformation tools. Join our Telegram group to get the latest news and ask questions [https://t.me/brainrex, #brainrex](https://t.me/brainrex). More about Brainrex at [https://brainrex.com](http://brainrex.com). Full Documentation can be found at [https://brainrexapi.github.io/docs](https://brainrexapi.github.io/docs)
 *
 * OpenAPI spec version: 0.1.1
 * Contact: support@brainrex.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InlineResponse2011 {
  /// Start date in YYYY/MM/DD
  #[serde(rename = "start_date")]
  start_date: Option<String>,
  /// End date in YYYY/MM/DD
  #[serde(rename = "end_date")]
  end_date: Option<String>,
  /// Opening price quote of the time frame with two decimal points
  #[serde(rename = "open")]
  open: Option<String>,
  /// Closing price quote of the time frame with two decimal points
  #[serde(rename = "close")]
  close: Option<String>,
  /// Highest price of the time frame with two decimal points
  #[serde(rename = "high")]
  high: Option<String>,
  /// Volume of currency exchanged in the time frame with two decimal points
  #[serde(rename = "vol")]
  vol: Option<String>
}

impl InlineResponse2011 {
  pub fn new() -> InlineResponse2011 {
    InlineResponse2011 {
      start_date: None,
      end_date: None,
      open: None,
      close: None,
      high: None,
      vol: None
    }
  }

  pub fn set_start_date(&mut self, start_date: String) {
    self.start_date = Some(start_date);
  }

  pub fn with_start_date(mut self, start_date: String) -> InlineResponse2011 {
    self.start_date = Some(start_date);
    self
  }

  pub fn start_date(&self) -> Option<&String> {
    self.start_date.as_ref()
  }

  pub fn reset_start_date(&mut self) {
    self.start_date = None;
  }

  pub fn set_end_date(&mut self, end_date: String) {
    self.end_date = Some(end_date);
  }

  pub fn with_end_date(mut self, end_date: String) -> InlineResponse2011 {
    self.end_date = Some(end_date);
    self
  }

  pub fn end_date(&self) -> Option<&String> {
    self.end_date.as_ref()
  }

  pub fn reset_end_date(&mut self) {
    self.end_date = None;
  }

  pub fn set_open(&mut self, open: String) {
    self.open = Some(open);
  }

  pub fn with_open(mut self, open: String) -> InlineResponse2011 {
    self.open = Some(open);
    self
  }

  pub fn open(&self) -> Option<&String> {
    self.open.as_ref()
  }

  pub fn reset_open(&mut self) {
    self.open = None;
  }

  pub fn set_close(&mut self, close: String) {
    self.close = Some(close);
  }

  pub fn with_close(mut self, close: String) -> InlineResponse2011 {
    self.close = Some(close);
    self
  }

  pub fn close(&self) -> Option<&String> {
    self.close.as_ref()
  }

  pub fn reset_close(&mut self) {
    self.close = None;
  }

  pub fn set_high(&mut self, high: String) {
    self.high = Some(high);
  }

  pub fn with_high(mut self, high: String) -> InlineResponse2011 {
    self.high = Some(high);
    self
  }

  pub fn high(&self) -> Option<&String> {
    self.high.as_ref()
  }

  pub fn reset_high(&mut self) {
    self.high = None;
  }

  pub fn set_vol(&mut self, vol: String) {
    self.vol = Some(vol);
  }

  pub fn with_vol(mut self, vol: String) -> InlineResponse2011 {
    self.vol = Some(vol);
    self
  }

  pub fn vol(&self) -> Option<&String> {
    self.vol.as_ref()
  }

  pub fn reset_vol(&mut self) {
    self.vol = None;
  }

}



